# Generated by Django 4.2.1 on 2023-05-09 14:14

import django.db.models.deletion
import mptt.fields
from django.conf import settings
from django.db import migrations, models

COUNTRY_CHOICES = choices = [
    ("AW", "AW"),
    ("AF", "AF"),
    ("AO", "AO"),
    ("AI", "AI"),
    ("AX", "AX"),
    ("AL", "AL"),
    ("AD", "AD"),
    ("AE", "AE"),
    ("AR", "AR"),
    ("AM", "AM"),
    ("AS", "AS"),
    ("AQ", "AQ"),
    ("TF", "TF"),
    ("AG", "AG"),
    ("AU", "AU"),
    ("AT", "AT"),
    ("AZ", "AZ"),
    ("BI", "BI"),
    ("BE", "BE"),
    ("BJ", "BJ"),
    ("BQ", "BQ"),
    ("BF", "BF"),
    ("BD", "BD"),
    ("BG", "BG"),
    ("BH", "BH"),
    ("BS", "BS"),
    ("BA", "BA"),
    ("BL", "BL"),
    ("BY", "BY"),
    ("BZ", "BZ"),
    ("BM", "BM"),
    ("BO", "BO"),
    ("BR", "BR"),
    ("BB", "BB"),
    ("BN", "BN"),
    ("BT", "BT"),
    ("BV", "BV"),
    ("BW", "BW"),
    ("CF", "CF"),
    ("CA", "CA"),
    ("CC", "CC"),
    ("CH", "CH"),
    ("CL", "CL"),
    ("CN", "CN"),
    ("CI", "CI"),
    ("CM", "CM"),
    ("CD", "CD"),
    ("CG", "CG"),
    ("CK", "CK"),
    ("CO", "CO"),
    ("KM", "KM"),
    ("CV", "CV"),
    ("CR", "CR"),
    ("CU", "CU"),
    ("CW", "CW"),
    ("CX", "CX"),
    ("KY", "KY"),
    ("CY", "CY"),
    ("CZ", "CZ"),
    ("DE", "DE"),
    ("DJ", "DJ"),
    ("DM", "DM"),
    ("DK", "DK"),
    ("DO", "DO"),
    ("DZ", "DZ"),
    ("EC", "EC"),
    ("EG", "EG"),
    ("ER", "ER"),
    ("EH", "EH"),
    ("ES", "ES"),
    ("EE", "EE"),
    ("ET", "ET"),
    ("FI", "FI"),
    ("FJ", "FJ"),
    ("FK", "FK"),
    ("FR", "FR"),
    ("FO", "FO"),
    ("FM", "FM"),
    ("GA", "GA"),
    ("GB", "GB"),
    ("GE", "GE"),
    ("GG", "GG"),
    ("GH", "GH"),
    ("GI", "GI"),
    ("GN", "GN"),
    ("GP", "GP"),
    ("GM", "GM"),
    ("GW", "GW"),
    ("GQ", "GQ"),
    ("GR", "GR"),
    ("GD", "GD"),
    ("GL", "GL"),
    ("GT", "GT"),
    ("GF", "GF"),
    ("GU", "GU"),
    ("GY", "GY"),
    ("HK", "HK"),
    ("HM", "HM"),
    ("HN", "HN"),
    ("HR", "HR"),
    ("HT", "HT"),
    ("HU", "HU"),
    ("ID", "ID"),
    ("IM", "IM"),
    ("IN", "IN"),
    ("IO", "IO"),
    ("IE", "IE"),
    ("IR", "IR"),
    ("IQ", "IQ"),
    ("IS", "IS"),
    ("IL", "IL"),
    ("IT", "IT"),
    ("JM", "JM"),
    ("JE", "JE"),
    ("JO", "JO"),
    ("JP", "JP"),
    ("KZ", "KZ"),
    ("KE", "KE"),
    ("KG", "KG"),
    ("KH", "KH"),
    ("KI", "KI"),
    ("KN", "KN"),
    ("KR", "KR"),
    ("KW", "KW"),
    ("LA", "LA"),
    ("LB", "LB"),
    ("LR", "LR"),
    ("LY", "LY"),
    ("LC", "LC"),
    ("LI", "LI"),
    ("LK", "LK"),
    ("LS", "LS"),
    ("LT", "LT"),
    ("LU", "LU"),
    ("LV", "LV"),
    ("MO", "MO"),
    ("MF", "MF"),
    ("MA", "MA"),
    ("MC", "MC"),
    ("MD", "MD"),
    ("MG", "MG"),
    ("MV", "MV"),
    ("MX", "MX"),
    ("MH", "MH"),
    ("MK", "MK"),
    ("ML", "ML"),
    ("MT", "MT"),
    ("MM", "MM"),
    ("ME", "ME"),
    ("MN", "MN"),
    ("MP", "MP"),
    ("MZ", "MZ"),
    ("MR", "MR"),
    ("MS", "MS"),
    ("MQ", "MQ"),
    ("MU", "MU"),
    ("MW", "MW"),
    ("MY", "MY"),
    ("YT", "YT"),
    ("NA", "NA"),
    ("NC", "NC"),
    ("NE", "NE"),
    ("NF", "NF"),
    ("NG", "NG"),
    ("NI", "NI"),
    ("NU", "NU"),
    ("NL", "NL"),
    ("NO", "NO"),
    ("NP", "NP"),
    ("NR", "NR"),
    ("NZ", "NZ"),
    ("OM", "OM"),
    ("PK", "PK"),
    ("PA", "PA"),
    ("PN", "PN"),
    ("PE", "PE"),
    ("PH", "PH"),
    ("PW", "PW"),
    ("PG", "PG"),
    ("PL", "PL"),
    ("PR", "PR"),
    ("KP", "KP"),
    ("PT", "PT"),
    ("PY", "PY"),
    ("PS", "PS"),
    ("PF", "PF"),
    ("QA", "QA"),
    ("RE", "RE"),
    ("RO", "RO"),
    ("RU", "RU"),
    ("RW", "RW"),
    ("SA", "SA"),
    ("SD", "SD"),
    ("SN", "SN"),
    ("SG", "SG"),
    ("GS", "GS"),
    ("SH", "SH"),
    ("SJ", "SJ"),
    ("SB", "SB"),
    ("SL", "SL"),
    ("SV", "SV"),
    ("SM", "SM"),
    ("SO", "SO"),
    ("PM", "PM"),
    ("RS", "RS"),
    ("SS", "SS"),
    ("ST", "ST"),
    ("SR", "SR"),
    ("SK", "SK"),
    ("SI", "SI"),
    ("SE", "SE"),
    ("SZ", "SZ"),
    ("SX", "SX"),
    ("SC", "SC"),
    ("SY", "SY"),
    ("TC", "TC"),
    ("TD", "TD"),
    ("TG", "TG"),
    ("TH", "TH"),
    ("TJ", "TJ"),
    ("TK", "TK"),
    ("TM", "TM"),
    ("TL", "TL"),
    ("TO", "TO"),
    ("TT", "TT"),
    ("TN", "TN"),
    ("TR", "TR"),
    ("TV", "TV"),
    ("TW", "TW"),
    ("TZ", "TZ"),
    ("UG", "UG"),
    ("UA", "UA"),
    ("UM", "UM"),
    ("UY", "UY"),
    ("US", "US"),
    ("UZ", "UZ"),
    ("VA", "VA"),
    ("VC", "VC"),
    ("VE", "VE"),
    ("VG", "VG"),
    ("VI", "VI"),
    ("VN", "VN"),
    ("VU", "VU"),
    ("WF", "WF"),
    ("WS", "WS"),
    ("YE", "YE"),
    ("ZA", "ZA"),
    ("ZM", "ZM"),
    ("ZW", "ZW"),
]


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("categ_id", models.IntegerField(default=None, null=True)),
                (
                    "category_id",
                    models.CharField(default=None, max_length=15, null=True),
                ),
                ("name", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="MeatInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "country_of_disassembly",
                    models.CharField(
                        choices=COUNTRY_CHOICES,
                        default=None,
                        max_length=2,
                        null=True,
                    ),
                ),
                (
                    "country_of_rearing",
                    models.CharField(
                        choices=COUNTRY_CHOICES,
                        default=None,
                        max_length=2,
                        null=True,
                    ),
                ),
                (
                    "country_of_slaughter",
                    models.CharField(
                        choices=COUNTRY_CHOICES,
                        default=None,
                        max_length=2,
                        null=True,
                    ),
                ),
                (
                    "cutting_plant_registration",
                    models.CharField(default=None, max_length=150, null=True),
                ),
                (
                    "slaughterhouse_registration",
                    models.CharField(default=None, max_length=150, null=True),
                ),
                (
                    "lot_number",
                    models.CharField(default=None, max_length=50, null=True),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("code", models.CharField(max_length=40)),
                (
                    "code_type",
                    models.CharField(
                        choices=[
                            ("gtin", "gtin"),
                            ("whitelisted_plu", "whitelisted_plu"),
                        ],
                        default=None,
                        max_length=15,
                        null=True,
                    ),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True, default=None, max_length=100, null=True
                    ),
                ),
                ("amount_multiplier", models.IntegerField()),
                ("brand", models.CharField(max_length=150)),
                ("description", models.CharField(max_length=200)),
                (
                    "edeka_article_number",
                    models.CharField(default=None, max_length=20, null=True),
                ),
                ("net_weight", models.FloatField()),
                ("gross_weight", models.FloatField(default=None, null=True)),
                ("unit_name", models.CharField(max_length=3)),
                ("notes", models.CharField(default=None, max_length=200, null=True)),
                (
                    "packaging",
                    models.CharField(
                        choices=[
                            ("PUG", "PUG"),
                            ("CT", "CT"),
                            ("CU", "CU"),
                            ("BO", "BO"),
                            ("NE", "NE"),
                            ("BX", "BX"),
                            ("CR", "CR"),
                            ("BJ", "BJ"),
                            ("JR", "JR"),
                            ("PU", "PU"),
                        ],
                        max_length=5,
                    ),
                ),
                (
                    "trade_item_unit_descriptor",
                    models.CharField(
                        choices=[
                            ("CASE", "CASE"),
                            ("BASE_UNIT_OR_EACH", "BASE_UNIT_OR_EACH"),
                        ],
                        max_length=17,
                    ),
                ),
                (
                    "trade_item_unit_descriptor_name",
                    models.CharField(
                        choices=[
                            ("Karton", "Karton"),
                            ("Basiseinheit", "Basiseinheit"),
                        ],
                        default=None,
                        max_length=12,
                        null=True,
                    ),
                ),
                (
                    "requires_best_before_date",
                    models.BooleanField(default=None, null=True),
                ),
                ("requires_meat_info", models.BooleanField(default=False)),
                (
                    "validation_status",
                    models.CharField(
                        choices=[
                            ("validated", "validated"),
                            ("unvalidated", "unvalidated"),
                        ],
                        max_length=11,
                    ),
                ),
                (
                    "vat_country_name",
                    models.CharField(default=None, max_length=30, null=True),
                ),
                ("vat_label", models.CharField(default=None, max_length=15, null=True)),
                ("vat_rate_code", models.IntegerField(default=None, null=True)),
                (
                    "vat_rate",
                    models.CharField(
                        choices=[("STANDARD", "STANDARD"), ("LOW", "LOW")],
                        default=None,
                        max_length=8,
                        null=True,
                    ),
                ),
                (
                    "regulated_name",
                    models.CharField(default=None, max_length=100, null=True),
                ),
                ("lft", models.PositiveIntegerField(editable=False)),
                ("rght", models.PositiveIntegerField(editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(editable=False)),
                (
                    "category",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="products",
                        to="products.category",
                    ),
                ),
                (
                    "meat_info",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="products.meatinfo",
                    ),
                ),
                (
                    "parent",
                    mptt.fields.TreeForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="children",
                        to="products.product",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Supplier",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, unique=True)),
                ("address", models.CharField(max_length=150)),
                ("phone_number", models.CharField(max_length=15)),
                ("since_date", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="StocksByBestBeforeDate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("bbd", models.DateTimeField(default=None, null=True)),
                ("amount", models.IntegerField()),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="stocks_by_expiry_date",
                        to="products.product",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Session",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("session_id", models.IntegerField(unique=True)),
                ("start_time", models.DateTimeField()),
                ("ent_time", models.DateTimeField()),
                (
                    "supplier",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sessions",
                        to="products.supplier",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="product",
            name="session",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="products",
                to="products.session",
            ),
        ),
        migrations.AddConstraint(
            model_name="category",
            constraint=models.UniqueConstraint(
                fields=("categ_id", "category_id"), name="unique_category"
            ),
        ),
    ]
